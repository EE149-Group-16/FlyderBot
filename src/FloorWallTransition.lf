target C {
    platform: "RP2040",
    // files: ["../../robot-lib"],
    // cmake-include: ["../../robot-lib/robot-lib.txt"],
    // single-threaded: true
}

import Propeller from "lib/Propeller.lf"
import Servos from "lib/Servos.lf"
import mpu from "lib/mpu6050.lf"
import Ultrasonic from "lib/Ultrasonic.lf"
import Encoders from "lib/Encoders.lf"

main reactor {
    propeller = new Propeller()
    servos = new Servos()
    mpu = new mpu()
    u = new Ultrasonic()
    encoders = new Encoders()
    timer t(12 s, 3 s)
    timer ptimer(0 s, 1 s);
    timer t_mpu(1040 ms, 10 ms) 
    timer tran_timer(1 s, 100 ms) 

    timer stop(60 s)
    timer startPropeller0(3 s, 0 ms)
    timer startPropeller(15 s, 100 ms)

    timer t_u1(3025 ms, 200 ms)
    timer t_u2(3125 ms, 200 ms)

    timer t_enc(15050 ms, 200 ms)
    // timer stopPropeller(20 s)

    state frontPower: uint16_t

    state rearPower: uint16_t
    state rearAngle: uint16_t
    state frontAngle: uint16_t

    state rising: bool
    state done: bool
    
    state mpu_pitch: float

    state last_pitch: float

    state desSpeed: int
    state encLast: int
    state sumErr: int
    state err: int

    state count_imu: int

    reaction (startup) -> servos.front_angle, servos.rear_angle {=
        self -> frontPower = 1000; // started at 1350 power
        self -> rearPower = 1300;
        self -> rearAngle = 65;
        self -> frontAngle = 120;
        self->encLast = 0;
        self->sumErr = 0;
        self->err = 0;
        self->count_imu = 0;
        lf_set(servos.rear_angle, self->rearAngle);
        lf_set(servos.front_angle, self->frontAngle);
        
        self-> rising = true;
        self-> done = false;
    =}

    reaction(t_u1) -> u.trigger_l  {=
        lf_set(u.trigger_l, true);
    =}

    reaction(t_u2) -> u.trigger_r {=
        lf_set(u.trigger_r, true);
    =}


    reaction(t_mpu) -> mpu.trigger{= //pulsing imu
        lf_set(mpu.trigger, true);
    =}

    reaction(t_enc) -> encoders.trigger  {=
    //printf("check\n");
        lf_set(encoders.trigger, true);

    =}
        reaction(ptimer) -> encoders.trigger  {=
            printf("check\n");

        
            =}
        


    
    // reaction(t_mpu) {= //ermegency stop if we got too fast
    //     if (self->frontPower >= 1400 || self->rearPower >= 1700) {
    //         self->frontPower =1000 ;
    //         self->rearPower = 1300;
    //     }
    // =}
    

    reaction(startPropeller) -> propeller.front_power, propeller.rear_power {=
        if (self->frontPower >= 1500 || self->rearPower >= 1800) {
            self->frontPower =1000 ;
            self->rearPower = 1300;
        }
        lf_set(propeller.front_power, self->frontPower);
        lf_set(propeller.rear_power, self->rearPower);
        // printf("Setting Prop Front power: %d, back power: %d\n", self->frontPower,self->rearPower);
    =}

    reaction(mpu.pitch) {= //updating our state variable for roll
        
        self->mpu_pitch = mpu.pitch->value;
        //printf("imu roll: %f\n", self->mpu_pitch);

    =}

    initial mode {

        reaction(startPropeller0) -> propeller.trigger{=
            lf_set(propeller.trigger, true);
        =}

        reaction(startPropeller) -> reset(FLOOR) {=
        
            lf_set_mode(FLOOR);
=}

    } 
    
    
    mode FLOOR {
        // reaction(ptimer) {=
        //     printf("In floor mode\n");
        //     printf("mode react front power: %d, back power: %d\n", self->frontPower,self->rearPower);

        // =}
        reaction(t_mpu) -> servos.front_angle, servos.rear_angle{= //takes care of the angles       
            lf_set(servos.front_angle, 65);
            lf_set(servos.rear_angle, 120);
        =}
        reaction(encoders.right) -> servos.front_angle{= //takes care of the motors 
            self->desSpeed = 2;
            self->err = self->desSpeed - (encoders.right->value - self->encLast);
            self->sumErr += self->err;
            if (self->sumErr > 100) {
                self->sumErr = 100;
            }else if (self->sumErr < -100) {
                self->sumErr = -100;
            }
            // lf_set(servos.front_angle, (self->sumErr + 130)); 
            self->frontPower = 1070 + self->err*10 + self->sumErr;
            self->rearPower = 1350 + self->err*10 + self->sumErr;

            self->encLast = encoders.right->value;
        =}

        reaction(t_mpu) {= //takes care of the motors 
            // self->frontPower = 1100;
            // self->rearPower = 1400;
            
            self->last_pitch = self->mpu_pitch;
        =}
        reaction(u.left) -> reset(FLOOR_WALL) {=
            if (u.left->value < 0) {
                
            } else if (u.left->value <= 7) {
                lf_set_mode(FLOOR_WALL);
                self->rearPower = 1350;
            }
            else if (u.left->value <= 20) {
                self->frontPower = 1050;
                self->rearPower = 1350;
            // } else {
            //     self->frontPower = 1050;
            //     self->rearPower = 1350;
             }
             printf("US val: %f\n", u.left->value);
            printf("Front power: %d, back power: %d\n", self->frontPower,self->rearPower);
            //printf("distance: %f\n", u.left->value);
            self->last_pitch = self->mpu_pitch;
            
        =}

        // reaction(u.right) {=
        //     printf("right: %2.4f\n", u.right->value);
        // =}
    }

    mode FLOOR_WALL {
        reaction(u.left) {=
            // printf("distance: %f\n", u.left->value);
            // printf("mpu pitch: %f\n", self->mpu_pitch);
        =}

        reaction(encoders.right) -> servos.front_angle{= //takes care of the motors 
            self->desSpeed = 1;
            self->err = self->desSpeed - (encoders.right->value - self->encLast);
            self->sumErr += self->err;
            if (self->sumErr > 100) {
                self->sumErr = 100;
            }else if (self->sumErr < -100) {
                self->sumErr = -100;
            }
            // lf_set(servos.front_angle, (self->sumErr + 130)); 
            self->frontPower = 1400 + self->err*10 + self->sumErr*2;

            self->encLast = encoders.right->value;
        =}

        reaction(t_mpu) -> reset(DONE), propeller.front_power, propeller.rear_power, servos.front_angle, servos.rear_angle{= //takes care of the angles 
            int front = 160 + 1.5 * self->mpu_pitch;
            int back =55 - self-> mpu_pitch;
           
      
            if (self->mpu_pitch < -55) {
                self->count_imu += 1;
            } else {
                    self->count_imu = 0;
                
                lf_set(servos.front_angle, front);
                lf_set(servos.rear_angle, back);
            }

            if (self->count_imu >= 5) {
                self->frontPower = 1350;
                self->rearPower = 1450;
  
                lf_set(servos.front_angle, 0);
                lf_set(servos.rear_angle, 180);
                lf_set_mode(DONE);
            }
        =}

        // reaction(tran_timer) -> servos.front_angle, servos.rear_angle{= //takes care of the motors 
          
        //     if (self->mpu_pitch < -15) {
        //         self->frontPower = 1200;
        //         self->rearPower = 1350;
        //         lf_set(servos.front_angle, 0);
        //         lf_set(servos.rear_angle, 180);
        //     }
        //     self->last_pitch = self->mpu_pitch;
        // =}

       

}

    
    mode DONE {
        // reaction(t_mpu) -> servos.front_angle, servos.rear_angle {=
        //     lf_set(servos.front_angle, front);
        //     lf_set(servos.rear_angle, back);
        // =}
    }
    

    
    // reaction(startPropeller) {=
    //     lf_set(propeller.rear_power, 1500);
    // =}
    // reaction(stopPropeller) {=
    //     lf_set(propeller.rear_power, 1000);
    // =}
    // reaction(t) -> servos.rear_angle, servos.front_angle {=
    //     lf_set(servos.rear_angle, self->rearAngle);
    //     lf_set(servos.front_angle, self->frontAngle);
    //     // self->rearAngle -= 10;
    // =}

// NOTES
// 1250 strong enough to push against wall but not to prop (even at 90 deg)
}