target C {
    platform: "RP2040",
    // files: ["../../robot-lib"],
    // cmake-include: ["../../robot-lib/robot-lib.txt"],
    single-threaded: true
}

import Propeller from "lib/Propeller.lf"
import Servos from "lib/Servos.lf"
import mpu from "lib/mpu6050.lf"

main reactor {
    propeller = new Propeller()
    servos = new Servos()
    mpu = new mpu()
    timer t(12 s, 3 s)
    timer t_mpu(1 s, 100 ms) 
    timer stop(60 s)
    timer startPropeller(12 s)
    // timer stopPropeller(20 s)

    state frontPower: uint16_t

    state rearPower: uint16_t
    state rearAngle: uint16_t
    state frontAngle: uint16_t

    state rising: bool
    state done: bool
    
    state mpu_pitch: float
    state mpu_roll: float

    state last_roll: float
    reaction (startup) -> servos.front_angle, servos.rear_angle {=
        self -> frontPower = 1000; // started at 1350 power
        self -> rearPower = 1300;
        self -> rearAngle = 90;
        self -> frontAngle = 90;
        lf_set(servos.rear_angle, self->rearAngle);
        lf_set(servos.front_angle, self->frontAngle);
        
        self-> rising = true;
        self-> done = false;
    =}

    reaction(t_mpu) -> mpu.trigger{= //pulsing imu
        lf_set(mpu.trigger, true);
    =}
    
    reaction(t_mpu) {= //ermegency stop if we got too fast
        if (self->frontPower >= 1400 || self->rearPower >= 1700) {
            self->frontPower =1000 ;
            self->rearPower = 1300;
        }
    =}
    

    reaction(startPropeller) -> propeller.front_power, propeller.rear_power {=
        //lf_set(propeller.front_power, self->frontPower);
        //lf_set(propeller.rear_power, self->rearPower);
    =}

    reaction(mpu.roll) {= //updating our state variable for roll
        self->mpu_roll = mpu.roll->value;
        printf("ROLL VAL: %f\n", self->mpu_roll);
    =}

    mode FLOOR {

        
    }

    initial mode FLOOR_WALL {
        reaction(t_mpu) -> servos.front_angle, servos.rear_angle{= //takes care of the angles 
              int front = 160 + self->mpu_roll;
            int back =90 - self->mpu_roll;
           
      
           
            lf_set(servos.front_angle, front);
            lf_set(servos.rear_angle, back);
        =}

        reaction(t_mpu) {= //takes care of the motors 
            if (self->last_roll - self->mpu_roll < 20){
                self->frontPower += 50;
                self->rearPower += 50;
            }
            self->last_roll = self->mpu_roll;
        =}

        reaction(t_mpu) -> reset(DONE){=
            if (self->mpu_roll < -80) {
                lf_set_mode(DONE);
            }
        =}

}

    
    mode DONE {
        reaction(t_mpu) -> servos.front_angle, servos.rear_angle {=
            lf_set(servos.front_angle, front);
            lf_set(servos.rear_angle, back);
        =}
    }
    

    
    // reaction(startPropeller) {=
    //     lf_set(propeller.rear_power, 1500);
    // =}
    // reaction(stopPropeller) {=
    //     lf_set(propeller.rear_power, 1000);
    // =}
    // reaction(t) -> servos.rear_angle, servos.front_angle {=
    //     lf_set(servos.rear_angle, self->rearAngle);
    //     lf_set(servos.front_angle, self->frontAngle);
    //     // self->rearAngle -= 10;
    // =}

// NOTES
// 1250 strong enough to push against wall but not to prop (even at 90 deg)
}